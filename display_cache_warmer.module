<?php

/**
 * Implements hook_menu().
 */
function display_cache_warmer_menu() {
  $items = array();
  $items['admin/config/development/display-cache-warmer'] = array(
    'title' => 'Display Cache Warmer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('display_cache_warmer_settings_form'),
    'access arguments' => array('administer display cache'),
    'file' => 'display_cache_warmer.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function display_cache_warmer_cron() {
  DisplayCacheWarmer::warmCaches(_display_cache_warmer_variable_get('max_count_per_cron_run'));
}

/**
 * Proxies variable_get() holding the default values in one place.
 *
 * @param string $name
 *   Variable name without the "display_cache_warmer_" prefix.
 *
 * @return mixed
 */
function _display_cache_warmer_variable_get($name) {
  $defaults = array(
    'max_count_per_cron_run' => 300,
    'max_age' => 60*60*24*30,
    'wipe_out' => TRUE,
    'debug_mode' => FALSE,
  );
  return variable_get("display_cache_warmer_$name", $defaults[$name]);
}

/**
 * Logs debug information generated in warmCaches().
 *
 * @see DisplayCacheWarmer::warmCaches()
 */
function _display_cache_warmer_log() {
  $log =& display_cache_warmer_static();
  if (!empty($log['logged'])) {
    return;
  }
  lock_release('display_cache_warmer');
  $time = timer_read('display_cache_warmer');
  if (empty($log['completed'])) {
    watchdog('display_cache_warmer', "The cache warming was not fully completed. Execution time: $time.", array(), WATCHDOG_NOTICE);
  }
  if (!empty($log['debug_mode']) || (isset($log['success']) && $log['success'] > 0)) {
    $message = "Count of successfully warmed caches: {$log['success']}.";
    $fail = count($log['exceptions']);
    if ($fail > 0) {
      $message .= " <br />Count of skipped caches: $fail. See the next log record for the detailed information.";
    }
    $message .= " <br />Execution time: $time.";
    watchdog('display_cache_warmer', $message, array(), WATCHDOG_INFO);
    if ($fail > 0) {
      $message = 'Exceptions thrown during cache warming: <br /> <br />';
      foreach ($log['exceptions'] as $exception) {
        $message .= $exception->getMessage() . ' <br /> <br />';
      }
      watchdog('display_cache_warmer', $message, array(), WATCHDOG_INFO);
    }
  }
  $log['logged'] = TRUE;
}

/**
 * Static storage for the log data.
 *
 * @return mixed
 */
function &display_cache_warmer_static() {
  static $array = array();
  return $array;
}

/**
 * Implements hook_node_view_alter().
 */
function display_cache_warmer_node_view_alter(&$build) {
  // In case we are warming up the cache, we need to manually add the comments
  // on the node view because the comment_node_view() will add the comments only
  // if the current request belongs to the full node view page. So, what we do
  // here is just to remove that condition. See the last few lines from
  // comment_node_view().
  // We do this only if we are actually warming the cache.
  if (!empty($_GET['cache_warmer'])) {
    $node = $build['#node'];
    if (empty($build['comments']) && $node->comment != COMMENT_NODE_HIDDEN && $node->comment && $build['#view_mode'] == 'full' && empty($node->in_preview)) {
      $build['comments'] = comment_node_page_additions($node);
    }
  }
}
